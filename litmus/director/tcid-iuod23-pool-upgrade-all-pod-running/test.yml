---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:
  
        ## Generating the testname for deployment
        - include_tasks: /ansible-utils/create_testname.yml

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
          
        - set_fact:
            director_url : "http://{{ director_ip }}:30380"

        ## Getting the username
        - name: Get username
          shell: cat /etc/secret-volume/username
          register: username

        ## Getting the password.stdout     
        - name: Get password
          shell: cat /etc/secret-volume/password
          register: password

        ## Check whether openebs components are in Running state or not
        - name: Fetch OpenEBS control plane pods state
          shell: kubectl get pods -n {{ namespace }}  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - "{{ openebs_components }}"
          retries: 20
          delay: 5

        ## Get application pool health status for replica-1
        - name: Get application pool health status for replica-1
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: pool_health
          until: "pool_health.json.data[0].data.pods[0].state=='Running'"
          retries: 20
          delay: 2
        
        ## Get application pool health status for replica-2
        - name: Get application pool health status for replica-2
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: pool_health
          until: "pool_health.json.data[1].data.pods[0].state=='Running'"
          retries: 20
          delay: 2

        ## Get application pool health status for replica-3
        - name: Get application pool health status for replica-3
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: pool_health
          until: "pool_health.json.data[2].data.pods[0].state=='Running'"
          retries: 20
          delay: 2
         
        ## Upgrade openebs control plane
        - name: Upgrade openebs control plane
          shell: kubectl apply -f https://openebs.github.io/charts/openebs-operator-{{ openebs_target_version }}.yaml

        ## Fetch OpenEBS control plane pods state after control plane upgrade
        - name: Fetch OpenEBS control plane pods state after control plane upgrade
          shell: kubectl get pods -n {{ namespace }}  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - "{{ openebs_components }}"
          retries: 20
          delay: 5
        
        ## Get storage pool details
        - name: Get application details
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: storage_pool
        
        ## Upgrade data-plane component
        - name: Upgrade data-plane component
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/openebsupgradeclaims'
            method: POST
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
            body: '{"clusterId":"{{ cluster_id }}","kind":"poolUpgrade","targetVersion":"{{ openebs_target_version }}","upgradeComponents":[{"id":"{{ storage_pool.json.data[0].id }}"},{"id":"{{ storage_pool.json.data[1].id }}"},{"id":"{{ storage_pool.json.data[2].id }}"}]}'
            status_code: 201
          register: upgrade_claim
        
        - name: Check pool-1 upgrade job status
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/openebsupgradeclaims/{{ upgrade_claim.json.id }}/openebsupgradejobs'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: upgrade_job
          until: "upgrade_job.json.data[0].state=='Success'"
          retries: 25
          delay: 5

        - name: Check pool-2 upgrade job status
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/openebsupgradeclaims/{{ upgrade_claim.json.id }}/openebsupgradejobs'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: upgrade_job
          until: "upgrade_job.json.data[1].state=='Success'"
          retries: 25
          delay: 5

        - name: Check pool-3 upgrade job status
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/openebsupgradeclaims/{{ upgrade_claim.json.id }}/openebsupgradejobs'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: upgrade_job
          until: "upgrade_job.json.data[2].state=='Success'"
          retries: 25
          delay: 5

        - name: Checking whether all the pool pods are in running state after upgrading
          shell: kubectl get po -n openebs -l app=cstor-pool --no-headers| grep {{ item }} | awk '{print $3}'
          loop:
            - '{{ storage_pool.json.data[0].name }}'
            - '{{ storage_pool.json.data[1].name }}'
            - '{{ storage_pool.json.data[2].name }}'
          register: pool_pod_state
          until: "pool_pod_state.stdout=='Running'"
          retries: 25
          delay: 5

        - name: Checking pool pod's container status after upgrading
          shell: kubectl get po -n openebs -l app=cstor-pool --no-headers | grep {{ item }} | awk '{print $2}' | awk -F'/' '{print $1}' && kubectl get po -n openebs -l app=cstor-pool --no-headers | grep {{ item }} | awk '{print $2}' | awk -F'/' '{print $2}'
          loop:
            - '{{ storage_pool.json.data[0].name }}'
            - '{{ storage_pool.json.data[1].name }}'
            - '{{ storage_pool.json.data[2].name }}'
          register: pool_pod_status
          until: '{{ pool_pod_status.stdout_lines | unique | length == 1 }}'
          retries: 25
          delay: 5

        - name: Get openebs version of pool-1
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: storage_pool
          until: "storage_pool.json.data[0].data.version=='{{ openebs_target_version }}'"
          retries: 25
          delay: 5

        - name: Get openebs version of pool-2
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: storage_pool
          until: "storage_pool.json.data[1].data.version=='{{ openebs_target_version }}'"
          retries: 10
          delay: 2

        - name: Get openebs version of pool-3
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/mayastoragepools'
            method: GET
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
          register: storage_pool
          until: "storage_pool.json.data[2].data.version=='{{ openebs_target_version }}'"
          retries: 10
          delay: 2
        
        ## Setting flag as pass 
        - set_fact:
              flag: 'Pass'

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: 'Fail'
    
      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

        