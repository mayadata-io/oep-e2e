---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:

        ## Generating the testname for deployment
        - include_tasks: /ansible-utils/create_testname.yml

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
          
        ## Getting the username
        - name: Get username
          shell: cat /etc/secret-volume/username
          register: username

        ## Getting the password.stdout     
        - name: Get password
          shell: cat /etc/secret-volume/password
          register: password

        ## Check whether openebs components are in Running state or not
        - name: Check whether openebs components are in Running state or not
          shell: kubectl get pods -n {{ namespace }}  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - "{{ openebs_components }}"
          retries: 20
          delay: 5

        ## Fetch name of NDM Daemonset
        - name: Fetch name of NDM Daemonset
          shell: kubectl get daemonset -l {{ ndm_label }} -n {{ namespace }} -o jsonpath='{.items[0].metadata.name}'
          register: ndm_ds_name
        
        ## Add nodeSelector to NDM ds
        - name: Add nodeSelector to NDM ds
          shell: | 
            kubectl -n openebs patch daemonset openebs-ndm -p '{"spec": {"template": {"spec": {"nodeSelector": {"non-existing": "true"}}}}}'

        ## Wait untill NDM pods are removed
        - name: Wait untill NDM pods are removed 
          shell: kubectl get pods -l {{ ndm_label }} -n {{ namespace }} --no-headers 
          register: pod_status
          until: "pod_status.stdout == ''"
          retries: 10
          delay: 5
        
        ## Fetch the recommendation details
        - name: Fetch recommendations details
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/recommendations"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200,201,202
          register: recommendations
        
        ## Fetch the recommendation id 
        - name: Fetch the recommendation id
          set_fact:
            recommendation_id: "{{ recommendations.json.data[0].id }}"

        ## List Capacity Recommendations
        - name: List Capacity Recommendations
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/recommendations/{{ recommendation_id }}/?action=getcapacityrecommendation'
            method: POST
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
            body: '{"clusterId":"{{ cluster_id }}", "raidGroupConfig":{"groupDeviceCount":1, "raidType":"stripe"}}'
            status_code: 200,201,202
          register: recommendation_list
          failed_when: recommendation_list.json.data != []

        ## List Device Recommendations
        - name: List Device Recommendations
          uri:
            url: '{{ director_url }}/v3/groups/{{ group_id }}/recommendations/{{ recommendation_id }}/?action=getdevicerecommendation'
            method: POST
            url_username: '{{ username.stdout }}'
            url_password: '{{ password.stdout }}'
            return_content: yes
            force_basic_auth: yes
            body_format: json
            body: '{"clusterId":"{{ cluster_id }}", "deviceGroupName":"","poolCapacity":"1G","poolName":"rec-create-test", "raidGroupConfig":{"groupDeviceCount":1, "raidType":"stripe"}}'
            status_code: 200,201,202
          register: device_recommendation
          failed_when: device_recommendation.json.data != []

        # Rollout the changes performed
        - name: Rollout the changes performed
          shell: kubectl rollout undo daemonset/{{ndm_ds_name.stdout}} -n {{ namespace }}

        - set_fact:
            flag: "Pass"
        
      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'