---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:
  
        ## Generating the testname for deployment
        - include_tasks: /ansible-utils/create_testname.yml

        ## Record Start-Of-Test In Litmus Result CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
          
        ## Saving the director url
        - set_fact:
            director_url : "http://{{ director_ip }}:30380"
        
        ## Getting username
        - name: Get username
          shell: cat /etc/secret-volume/username
          register: username

        ## Getting password     
        - name: Get password
          shell: cat /etc/secret-volume/password
          register: password

        ## Checking if openebs is already installed
        - name: Check if openebs is already installed
          shell: kubectl get deploy maya-apiserver --all-namespaces | wc -l
          args:
            executable: /bin/bash
          register: maya_api
          failed_when: "{{ maya_api.stdout }} != 0"

        ## Fetch the projectid of the project where the cluster is running
        - name: Fetch the project details of the project where the cluster is running
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/project"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            status_code: 200
          register: project_details

        ## Saving Project id
        - name: Saving the project id
          set_fact:
            project_id: "{{ project_details.json.data[0].id }}"

        ## Getting the total number of nodes in the cluster
        - name: Getting the number of nodes in the cluster
          shell: kubectl get nodes --no-headers | wc -l
          args:
            executable: /bin/bash
          register: nodes

        ## Fail the test if it contains less than two nodes
        ## Minimum two nodes required
        - name: Checking if the cluster contains atleast two nodes
          fail:
            msg: Minimum two nodes is required to install openebs in this cluster
          when: "{{ nodes.stdout }} < 2"

        ## Getting node details of the cluster
        ## Selecting the node which is in active state present in the cluster
        - name: Getting the node details of the cluster
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes?state=active&clusterId={{ cluster_id }}"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body:
              status_code: 202
          register: node_details

        ## Define variable node_id
        - set_fact:
            node_id: []

        ## Storing the node id of the nodes in the cluster
        - name: Storing the node id of node in the cluster
          set_fact:
            node_id: "{{ node_id  + [item.id] }}"
          loop: "{{ node_details.json.data }}"


        ## Labeling the node-1 of the Cluster with controlPlaneNode=true and dataPlaneNode=false
        ## With first element in the node_id list
        - name: Labeling the node-1 of the cluster
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes/{{ node_id[0] }}/?action=labelnodes"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{"controlPlaneNode": true, "dataPlaneNode": false}'
            status_code: 202
          register: labelnode1

        ## Labeling node-2 of the Cluster with controlPlaneNode=false and dataPlaneNode=true
        ## With the second element in the node_id list
        - name: Labeling node-2 of the cluster
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes/{{ node_id[1] }}/?action=labelnodes"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes          args:
            executable: /bin/bash
            body_format: json
            body: '{"controlPlaneNode": false, "dataPlaneNode": true}'
            status_code: 202
          register: labelnode2

        ## Passing the value for openebs creation in the cluster
        - name: Passing the values required for openebs creation
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{ "clusterId": "{{ cluster_id }}","creatorId": "{{ group_id }}","projectId": "{{ project_id }}","templateId": "{{ template_id }}","namespace": "{{ namespace }}","defaultDirectory": "{{ default_directory }}","dockerRegistry": "{{ docker_registry }}","includeDeviceFilters": "{{ include_device_filters }}","excludeDeviceFilters": "{{ exclude_device_filters }}","cpuResourceLimit": "{{ cpu_resource_limit }}","memoryResourceLimit": " {{ memory_resource_limit }}","installationMode": "{{ installation_mode }}" }'         
            status_code: 201
          register: get_openebs

        - name: Saving the yaml for openebs installation
          set_fact:
            installopenebs: "{{ get_openebs.json.installationManifest }}"

        - name: Saving the id
          set_fact:
            openebsid: "{{ get_openebs.json.id }}"

        ## Checking the id
        - name: Getting into the openebs installtion stage and checking the id
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebsid }}"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200
          register: install_openebs

        ## Installing openebs
        - name: Installing openebs on the DOP self cluster
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses/{{ openebsid }}/?action=openebsinstall"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{"yaml": {{ installopenebs }}}'
            status_code: 200
          register: res_openebs

        ## Checking the openebs Installation    
        - name: Fetch OpenEBS control plane pods state
          shell: kubectl get pods -n {{ namespace }}  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - "{{ openebs_components }}"
          retries: 20
          delay: 5

        ## Get the container Status of the openebs pods
        - name: Get the container status of the openebs pods.
          shell: >
            kubectl get pod -n {{ namespace }} --no-headers
            -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | tr ' ' '\n' | uniq
          args:
            executable: /bin/bash
          register: containerStatus
          until: "containerStatus.stdout == 'true'"
          retries: 20
          delay: 2

        ## Checking the resource litmit is imposed perfectly or not
        - name: Getting the CPU limit of maya-api-server
          shell: kubectl get deploy maya-apiserver -n {{ namespace }} jsonpath='{.spec.template.spec.containers[*].resources.limits.cpu}'
          args:
            executable: /bin/bash
          register: cpu_limit
          failed_when: "cpu_limit != cpu_resource_limit"

        ## Checking the resource litmit is imposed perfectly or not
        - name: Getting the Memory limit of maya-api-server
          shell: kubectl get deploy maya-apiserver -n {{ namespace }} jsonpath='{.spec.template.spec.containers[*].resources.limits.memory}'
          args:
            executable: /bin/bash
          register: memory_limit
          failed_when: "memory_limit != memory_resource_limit"

        ## Removing the labels from the cluster nodes
        - include_tasks: /utils/openebs-label-cleanup.yml

        ## Deleting openebs from the cluster
        - include_tasks: /utils/openebs-cleanup.yml
          vars:
            namespace: "{{ openebs_namespace.stdout }}"          

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CRhttps://github.com/mayadata-io/oep-e2e-gcp/blob/dc8f3585e5debe12a700220066b204a0b35cbb5c/stages/9-openebs-install-check/openebs-reinstallation.md)
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'
