---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block: 
      
        ## Generating the testname for deployment
        - include_tasks: /ansible-utils/create_testname.yml

        ## Record Start-Of-Test In Litmus Result CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
        
        ## Getting username
        - name: Get username
          shell: cat /etc/secret-volume/username
          register: username

        ## Getting password     
        - name: Get password
          shell: cat /etc/secret-volume/password
          register: password

        ## Fetch the projectid of the project where the cluster is running
        - name: Fetch the projectid of the project where the cluster is running
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/project"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            status_code: 200
          register: project_details

        ## Fetch template_details
        - name: Fetch the template_details
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebstemplates?sort=id&order=desc"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            status_code: 200
          register: template_details

        ## Fetching template_id
        - name: Fetching template_id
          set_fact:
            template_id: "{{ template_details.json.data[0].id }}"

        ## Saving Project id
        - name: Saving project id
          set_fact:
            project_id: "{{ project_details.json.data[0].id }}"

        ## Installing openebs on the cluster
        - name: Installing openebs on the cluster
          shell: kubectl apply -f https://openebs.github.io/charts/openebs-operator-{{ openebs_version }}.yaml 

        ## Checking the openebs Installation    
        - name: Fetch OpenEBS control plane pods state
          shell: kubectl get pods -n openebs  | grep {{ item }} | awk '{print $3}' | awk -F':' '{print $1}' | tail -n 1
          register: app_status
          until: app_status.stdout == 'Running'
          with_items:
            - "{{ openebs_components }}"
          retries: 30
          delay: 10

        ## Get the container Status of the openebs pods
        - name: Get the container status of the openebs pods.
          shell: >
            kubectl get pod -n openebs --no-headers
            -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | tr ' ' '\n' | uniq
          args:
            executable: /bin/bash
          register: containerStatus
          until: "containerStatus.stdout == 'true'"
          retries: 30
          delay: 10        

        ## Check openebs is installed or not in the cluster.
        ## This task will look for active openebs entry for 2 mins after that it will fail
        - name: Check openebs is installed or not in the cluster
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/openebses?state=active&clusterId={{ cluster_id }}"
            method: GET
            url_username: "{{ username.stdout }}" 
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200
          register: openebses_active
          until: "openebses_active.json.data != []"
          delay: 2
          retries: 30

        ## Getting node details of the cluster
        ## Selecting the node which is in active state in the cluster
        - name: Getting the node details of the cluster which is in active state
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/nodes?state=active&clusterId={{ cluster_id }}"
            method: GET
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            status_code: 200
          register: node_details
        
        ## Define variable node_id
        - set_fact:
            node_id: []

        ## Storing the id of the nodes in the cluster
        - name: Storing the id of nodes in the cluster
          set_fact:
            node_id: "{{ node_id  + [item.id] }}"
          loop: "{{ node_details.json.data }}"

        ## Installing openebs
        ## Also accepted error code is 405 which means openebs is already installed
        - name: Giving required variables for openebs installation
          uri:
            url: "{{ director_url }}/v3/groups/{{ group_id }}/clusters/{{ cluster_id }}/openebses"
            method: POST
            url_username: "{{ username.stdout }}"
            url_password: "{{ password.stdout }}"
            force_basic_auth: yes
            return_content: yes
            body_format: json
            body: '{ "clusterId": "{{ cluster_id }}","creatorId": "{{ group_id }}","projectId": "{{ project_id }}","templateId": "{{ template_id }}","namespace": "{{ namespace }}","defaultDirectory": "{{ default_directory }}","dockerRegistry": "{{ docker_registry }}","includeDeviceFilters": "{{ include_device_filters }}","excludeDeviceFilters": "{{ exclude_device_filters }}","cpuResourceLimit": "{{ cpu_resource_limit }}","memoryResourceLimit": " {{ memory_resource_limit }}","installationMode": "{{ installation_mode }}" }'         
            status_code: 405
          register: get_openebs

        
        ## Checking if openebs is installed or not.
        - name: Check if openebs is installed or not.
          shell: kubectl get deploy --all-namespaces -l name=maya-apiserver --no-headers | awk '{print $1}' | wc -l
          args:
            executable: /bin/bash
          register: count_maya_api

        ## If openebs is installed in the cluster then get the namespace
        - name: Getting the namespace where openebs is installed 
          shell: kubectl get deploy --all-namespaces -l name=maya-apiserver --no-headers | awk '{print $1}'
          args:
            executable: /bin/bash
          register: openebs_namespace
          when: "count_maya_api.stdout == '1'"
        
        ## Removing the labels from the cluster nodes
        - include_tasks: /utils/openebs-label-cleanup.yml

        ## Deleting openebs from the cluster
        - include_tasks: /utils/openebs-cleanup.yml
          vars:
            namespace: "{{ openebs_namespace.stdout }}"

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /ansible-utils/update_litmus_result_resource.yml
          vars:
            status: 'EOT'
            